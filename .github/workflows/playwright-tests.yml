name: Playwright Tests

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - imaging
  
  # Run on pull requests
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'tests/**'
      - 'playwright.config.ts'
      - 'package.json'
      - '.github/workflows/**'
  
  # Run on push to main branches
  push:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
        
    steps:
    - uses: actions/checkout@v4
    
    - uses: pnpm/action-setup@v4
      with:
        version: 10.7.0
        
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Install Playwright Browsers
      run: pnpm exec playwright install --with-deps
      
    - name: Run Playwright tests (All)
      if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == '' || github.event_name != 'workflow_dispatch'
      run: |
        if [ "${{ github.event.inputs.browser }}" = "all" ] || [ "${{ github.event.inputs.browser }}" = "" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          pnpm exec playwright test --project=${{ matrix.browser }}
        elif [ "${{ github.event.inputs.browser }}" = "${{ matrix.browser }}" ]; then
          pnpm exec playwright test --project=${{ matrix.browser }}
        else
          echo "Skipping ${{ matrix.browser }} as it's not selected"
          exit 0
        fi
        
    - name: Run Imaging Tests Only
      if: github.event.inputs.test_suite == 'imaging'
      run: |
        if [ "${{ github.event.inputs.browser }}" = "all" ] || [ "${{ github.event.inputs.browser }}" = "" ]; then
          pnpm exec playwright test tests/imaging_tests/ --project=${{ matrix.browser }}
        elif [ "${{ github.event.inputs.browser }}" = "${{ matrix.browser }}" ]; then
          pnpm exec playwright test tests/imaging_tests/ --project=${{ matrix.browser }}
        else
          echo "Skipping ${{ matrix.browser }} as it's not selected"
          exit 0
        fi
        
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: playwright-report/
        retention-days: 30
        
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: test-results/
        retention-days: 30
        
  # Job to merge and publish combined test report
  publish-report:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/download-artifact@v4
      with:
        pattern: playwright-report-*
        merge-multiple: true
        path: all-reports/
        
    - uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
        path: all-test-results/
        
    - name: Publish HTML Report
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: all-reports
        destination_dir: test-reports/${{ github.run_number }}
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Create a summary comment for the PR
          let comment = '## 🎭 Playwright Test Results\n\n';
          comment += `**Run ID:** ${context.runId}\n`;
          comment += `**Commit:** ${context.sha.substring(0, 7)}\n\n`;
          
          // Check if there are any test results
          try {
            const testResultsPath = 'all-test-results';
            if (fs.existsSync(testResultsPath)) {
              comment += '### Test Execution Summary\n';
              comment += '- ✅ Tests completed successfully\n';
              comment += '- 📊 Detailed reports available in artifacts\n';
            } else {
              comment += '### ⚠️ Test Results\n';
              comment += '- No test results found\n';
            }
          } catch (error) {
            comment += '### ❌ Error\n';
            comment += `- Failed to read test results: ${error.message}\n`;
          }
          
          comment += '\n### 📋 Available Artifacts\n';
          comment += '- `playwright-report-*`: HTML test reports\n';
          comment += '- `test-results-*`: Raw test results and traces\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Performance monitoring job
  performance-check:
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
        path: test-results/
        
    - name: Analyze Performance
      run: |
        echo "## 📈 Performance Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Look for performance-related test results
        if find test-results -name "*.json" -type f | head -1 | xargs cat 2>/dev/null | grep -q "loadTime\|navigationTime"; then
          echo "✅ Performance metrics collected" >> $GITHUB_STEP_SUMMARY
          echo "- Image loading performance validated" >> $GITHUB_STEP_SUMMARY
          echo "- Navigation responsiveness checked" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No specific performance metrics found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Image rendering validation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Mouse scroll navigation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Series switching functionality" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Patient information overlay" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Visual regression testing" >> $GITHUB_STEP_SUMMARY